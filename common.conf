# Director 2.3 Config file
# Creates a small cluster including a Cloudera Data Science Workbench gateway node
#
#
# Copyright (c) 2016 Cloudera, Inc. All rights reserved.
#

#
# Simple AWS Cloudera Director configuration file with automatic role assignments
# that works as expected if you use a single instance type for all cluster nodes
#

#
# Cluster name
#
name: cdsw-workshop

#
# Cloud provider configuration (credentials, region or zone and optional default image)
#

ssh {

    username: ${SSH_USERNAME}
    privateKey: ${SSH_PRIVATEKEY}
}


#
# Configuration for Cloudera Manager. Cloudera Director can use an existing instance
# or bootstrap everything from scratch for a new cluster
#

cloudera-manager {

    instance: ${instances.master} {
    instanceNamePrefix: cm-${name}
        tags {
            application: "Cloudera Manager 5"
        }
    
   }
    krbAdminUsername: ${?krbAdminUsername}
    krbAdminPassword: ${?krbAdminPassword}

   configs {
        # CLOUDERA_MANAGER corresponds to the Cloudera Manager Server configuration options

   	 CLOUDERA_MANAGER {
	    enable_api_debug: false
            custom_banner_html: "Managed by Cloudera Director"
            MANAGES_PARCELS: true
	    enable_faster_bootstrap: true
            KDC_TYPE: ${?KDC_TYPE}
	    AD_KDC_DOMAIN: ${?AD_KDC_DOMAIN}
	    KDC_HOST: ${?KDC_HOST_IP} # Using IP because of DSE-1796
            SECURITY_REALM: ${?SECURITY_REALM}
            KRB_MANAGE_KRB5_CONF: ${?KRB_MANAGE_KRB5_CONF}
	    # Note use of aes256 - need to ensure ALL cluster members have the necessary JCE policy files.
	    # If you find that you can get a ticket but not use it then this is likely the problem!
            KRB_ENC_TYPES: ${?KRB_ENC_TYPES}
   	}
    }

    csds: [
        "http://archive.cloudera.com/spark2/csd/SPARK2_ON_YARN-2.1.0.cloudera1.jar"
    ]

    #
    # Automatically activate 60-Day Cloudera Enterprise Trial
    #
    enableEnterpriseTrial: true

    repository: "http://archive.cloudera.com/cm5/redhat/7/x86_64/cm/5.11/"
    repositoryKeyUrl: "http://archive.cloudera.com/cm5/redhat/7/x86_64/cm/RPM-GPG-KEY-cloudera"

    postCreateScripts: ["""#!/bin/sh -x
    exec >~/postCreateScripts.log 2>&1
    yum -y install unzip
curl -O -j -k -L -H 'Cookie: oraclelicense=accept-securebackup-cookie' http://download.oracle.com/otn-pub/java/jce/7/UnlimitedJCEPolicyJDK7.zip
unzip -o -j -d /usr/java/jdk1.7.0_67-cloudera/jre/lib/security UnlimitedJCEPolicyJDK7.zip
"""]
}

#
# Cluster description
#

cluster {

    products {
      CDH: 5.11 # includes Hive and Spark
      SPARK2: 2
      Anaconda: 4.2
    }


    parcelRepositories:
    ["http://archive.cloudera.com/cdh5/parcels/5.11/", 
    "https://archive.cloudera.com/spark2/parcels/2/",
    "https://repo.continuum.io/pkgs/misc/parcels/"
    ]

    services: [HDFS, YARN, SPARK2_ON_YARN, HIVE, OOZIE, IMPALA]

    masters {
      count: 1
      instance: ${instances.master}

      roles {
        HDFS: [NAMENODE, SECONDARYNAMENODE]
        YARN: [RESOURCEMANAGER, JOBHISTORY]
 	SPARK2_ON_YARN: [SPARK2_YARN_HISTORY_SERVER]
        HIVE: [HIVESERVER2, HIVEMETASTORE]
        OOZIE: [OOZIE_SERVER]
	IMPALA: [CATALOGSERVER, STATESTORE]
      }
# Implement this manually until the root problem is fixed in Director
#      configs {YARN {RESOURCEMANAGER { "yarn.scheduler.maximum-allocation-mb": 2048 }	  }}
    }

    workers {
      count: 3

      instance: ${instances.worker}

      roles {
        HDFS: [DATANODE]
	IMPALA: [IMPALAD]
        YARN: [NODEMANAGER]
      }
#      configs {YARN { NODEMANAGER { "yarn.nodemanager.resource.memory-mb": 2048 } }}
    }
    gateways {
      count: 1

      instance: ${instances.cdsw} {
      	bootstrapScripts: ${instances.cdsw.bootstrapScripts} ["""
cd /etc/yum.repos.d
curl -O https://archive.cloudera.com/cdsw/1/redhat/7/x86_64/cdsw/cloudera-cdsw.repo
rpm --import https://archive.cloudera.com/cdsw/1/redhat/7/x86_64/cdsw/RPM-GPG-KEY-cloudera
yum -y install cloudera-data-science-workbench
exit 0
"""]
}

      roles {
        HDFS: [GATEWAY]
	YARN: [GATEWAY]
	SPARK2_ON_YARN: [GATEWAY]
      }
      configs {
            SPARK2_ON_YARN {
                GATEWAY {
                    "spark2-conf/spark-env.sh_client_config_safety_valve": """if [ -z ${PYSPARK_PYTHON} ]; then export PYSPARK_PYTHON=/opt/cloudera/parcels/Anaconda/bin/python spark-submit pyspark_script.py; fi"""
                }
            }
        }
    }
    instancePostCreateScripts:  ["""#!/bin/sh -x
exec >~/instancePostCreateScripts.log 2>&1
echo Starting instancePostCreateScript
echo Adding supergroup and cdsw user

groupadd supergroup
useradd -G supergroup -u 12354 hdfs_super
useradd -G supergroup -u 12345 cdsw
echo Cloudera1 | passwd --stdin cdsw

# Check we're on the cdsw node
if rpm -q cloudera-data-science-workbench 
then
echo "This is the CDSW node"

# Install java using alternatives:
alternatives --install /usr/bin/java java /usr/java/jdk1.7.0_67-cloudera/bin/java 2000

# install git
yum -y install git

function googlep() {
	 curl --head --silent http://metadata.google.internal >/dev/null
}

function get_local_ip() {
	 if googlep
	 then
		curl -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip
	else
		curl http://169.254.169.254/latest/meta-data/local-ipv4
	fi
}

function get_public_ip() {
	 if googlep
	 then
		curl -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/access-configs/0/external-ip
	else
		curl http://169.254.169.254/latest/meta-data/public-ipv4
	fi
}

DOM="cdsw.$(get_public_ip).xip.io"
MASTER=$(get_local_ip)
# Because we only added two disks to the instance then they'll be the
# first and last devices in /etc/fstab. Cut them out and use them for
# the Docker Block Devices (DBD) and teh Abpplication Block Device (ABD)
DBD="$(grep '^/dev' /etc/fstab | cut -f1 -d' ' | head -1)"
ABD="$(grep '^/dev' /etc/fstab | cut -f1 -d' ' | tail -1)"
sed -i -e "s/\(DOMAIN=\).*/\1${DOM:?}/" -e "s/\(MASTER_IP=\).*/\1${MASTER:?}/"  -e "s@\(DOCKER_BLOCK_DEVICES=\).*@\1\"${DBD:?}\"@" -e "s@\(APPLICATION_BLOCK_DEVICE=\).*@\1\"${ABD:?}\"@" /etc/cdsw/config/cdsw.conf
for dev in $(grep '^/dev' /etc/fstab | cut -f1 -d' '); do umount $dev; done
sed -i '/^\/dev/d' /etc/fstab

# Ensure that cdsw can restart after reboot
# Cannot use sysctl directly since the bridge module isn't loaded until after sysctl
# So load the module early and put the configuration so that sysctl can do its stuff
echo bridge > /etc/modules-load.d/bridge.conf
echo "net.bridge.bridge-nf-call-iptables=1" >>/etc/sysctl.d/bridge.conf
# CDSW prereq
# Ensure that the ipv6 networking is NOT disabled - this can be done at boot time:
echo "net.ipv6.conf.all.disable_ipv6=0" >>/etc/sysctl.conf
# Ensure that the hard and soft limits on number of files is set so that cdsw is happy
# First, set the limits permanently:
cat >/etc/security/limits.conf/90-nofile.conf <<EOF
* soft nofile 1048576
* hard nofile 1048576
EOF

# Then, set them in the currently running system:
ulimit -n 1048576

if googlep
then
# Google only offers RHEL7.3, but CDSW checks for RHEL 7.2
# We apply this patch to circumvent the check
(cd /etc/cdsw/scripts
patch <<\EOF
--- -   2017-06-16 20:39:57.318975584 +0000
+++ preinstall-validation.sh    2017-06-16 20:28:50.588007327 +0000
@@ -15,7 +15,7 @@
 
 echo -n "Prechecking OS Version${PAUSE}"
 min_version="7.2" #inclusive
-max_version="7.2.9999" #inclusive
+max_version="7.3.9999"
 lsb_version=$(lsb_release -rs)
 if [ "$?" -ne "0" ]
 then
EOF
)
fi

# CDSW applies a too-strict check for selinux being disabled.
# This requires that the cdsw node be rebooted, so instead we 
# reduce the strength of the check to allow for selinux=permissive

(cd /etc/cdsw/scripts
patch <<\EOF
--- -   2017-06-16 20:39:57.318975584 +0000
+++ preinstall-validation.sh    2017-06-16 20:28:50.588007327 +0000
@@ -74,9 +74,9 @@
 fi
 
 echo -n "Prechecking that SELinux is disabled${PAUSE}"
-grep "^SELINUX=disabled" /etc/selinux/config &> /dev/null
+grep -Ei "^SELINUX=(permissive|disabled)" /etc/selinux/config
 die_on_error $? "Please set SELINUX=disabled in /etc/selinux/config, then reboot"
-getenforce 2>/dev/null | grep 'Disabled' &> /dev/null
+getenforce 2>/dev/null | grep -vi enforc &> /dev/null
 die_on_error $? "Please disable SELinux with setenforce 0"
 echo -e "${OK}"
EOF
)

# init cdsw
# There have been rpcbind service problems preventing cdsw init from working
# and this is an attempt to get around those issues:
systemctl stop rpcbind
systemctl start rpcbind
for i in {1..10}
do
  if cdsw reset && cdsw init
  then
    break
  else
    systemctl restart rpcbind
    sleep 1
  fi
done

## Make sure that we add an auto restart script to the boot sequence
echo "cdsw restart" >> /etc/rc.d/rc.local
chmod a+x /etc/rc.d/rc.local

fi
exit 0
"""]
}
